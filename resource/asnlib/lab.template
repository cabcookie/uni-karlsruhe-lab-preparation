AWSTemplateFormatVersion: 2010-09-09
Description: foundational Learner Lab template

Resources:

  LabRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LabRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
                - autoscaling.amazonaws.com
                - cloud9.amazonaws.com
                - cloudformation.amazonaws.com
                - cloudtrail.amazonaws.com
                - codecommit.amazonaws.com
                - cognito-idp.amazonaws.com
                - comprehend.amazonaws.com
                - databrew.amazonaws.com
                - datapipeline.amazonaws.com
                - dynamodb.amazonaws.com
                - ec2.amazonaws.com
                - ec2.application-autoscaling.amazonaws.com
                - elasticbeanstalk.amazonaws.com
                - elasticfilesystem.amazonaws.com
                - elasticloadbalancing.amazonaws.com
                - elasticmapreduce.amazonaws.com
                - events.amazonaws.com
                - forecast.amazonaws.com
                - glue.amazonaws.com
                - kms.amazonaws.com
                - lambda.amazonaws.com
                - lex.amazonaws.com
                - lightsail.amazonaws.com
                - logs.amazonaws.com
                - rds.amazonaws.com
                - redshift.amazonaws.com
                - rekognition.amazonaws.com
                - resource-groups.amazonaws.com
                - robomaker.amazonaws.com
                - s3.amazonaws.com
                - sagemaker.amazonaws.com
                - secretsmanager.amazonaws.com
                - servicecatalog.amazonaws.com
                - ssm.amazonaws.com
                - states.amazonaws.com
                - storagegateway.amazonaws.com
                - sts.amazonaws.com
                - translate.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  LabInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: LabInstanceProfile
      Path: /
      Roles:
        - !Ref LabRole

  MonitoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3

          # Regions
          region1 = 'us-east-1'
          region2 = 'us-west-2'

          # Boto clients
          ec2region1 = boto3.client('ec2', region_name=region1)
          ec2region2 = boto3.client('ec2', region_name=region2)
          lsregion1 = boto3.client('lightsail', region_name=region1)
          lsregion2 = boto3.client('lightsail', region_name=region2)
          smregion1 = boto3.client('sagemaker', region_name=region1)
          smregion2 = boto3.client('sagemaker', region_name=region2)

          # Forbidden EC2 Instance Types list
          tooBig = ['.2xlarge','.3xlarge','.4xlarge','.6xlarge','.8xlarge','.9xlarge','.10xlarge','.12xlarge','.16xlarge','.18xlarge','.24xlarge','.32xlarge','.56xlarge','.112xlarge','.metal']
          # Forbidden SageMaker Instance Types list
          sMtooBig = ['.2xlarge','.3xlarge','.4xlarge','.6xlarge','.8xlarge','.9xlarge','.10xlarge','.12xlarge','.16xlarge','.18xlarge','.24xlarge','.32xlarge','.56xlarge','.112xlarge','.metal']

          def lambda_handler(event, context):
              # Search EC2 in region1
              resp = ec2region1.describe_instances(
                Filters=[
                  {
                    'Name': 'instance-state-name',
                    'Values': [
                      'pending',
                      'running'
                    ]
                  },
                ]
              )
              for r in resp['Reservations']:
                  for i in r['Instances']:
                      print(i['InstanceId'], i ['InstanceType'])
                      x = [str(i['InstanceId'])]
                      for b in tooBig:
                          if str(b) in str(i['InstanceType']):
                              ec2region1.terminate_instances(InstanceIds=x)
                              print('Terminated instance: ' + str(i['InstanceId']))
              # Search EC2 in region2
              resp2 = ec2region2.describe_instances(
                Filters=[
                  {
                    'Name': 'instance-state-name',
                    'Values': [
                      'pending',
                      'running'
                    ]
                  },
                ]
              )
              for r in resp2['Reservations']:
                  for i in r['Instances']:
                      print(i['InstanceId'], i ['InstanceType'])
                      x = [str(i['InstanceId'])]
                      for b in tooBig:
                          if str(b) in str(i['InstanceType']):
                              ec2region2.terminate_instances(InstanceIds=x)
                              print('Terminated instance: ' + str(i['InstanceId']))
              # Search Lightsail in region1
              resp3 = lsregion1.get_instances()
              for i in resp3['instances']:
                  print(i['arn'], i['name'], i['bundleId'])
                  y = [str(i['bundleId'])]
                  if "2xlarge_" in str(i['bundleId']):
                      lsregion1.delete_instance(instanceName=str(i['name']),forceDeleteAddOns=True)
                      print('Terminated Lightsail instance: ' + str(i['name']))
              # Search Lightsail in region2
              resp4 = lsregion2.get_instances()
              for i in resp4['instances']:
                  print(i['arn'], i['name'], i['bundleId'])
                  y = [str(i['bundleId'])]
                  if "2xlarge_" in str(i['bundleId']):
                      lsregion2.delete_instance(instanceName=str(i['name']),forceDeleteAddOns=True)
                      print('Terminated Lightsail instance: ' + str(i['name']))
              #Search Sagemaker in region1
              resp5 = smregion1.list_notebook_instances(StatusEquals='InService')
              for i in resp5['NotebookInstances']:
                  print(i['InstanceType'], i['NotebookInstanceStatus'], i['NotebookInstanceName'])
                  for b in sMtooBig:
                      if str(b) in str(i['InstanceType']):
                          smregion1.stop_notebook_instance(NotebookInstanceName=str(i['NotebookInstanceName']))
                          print('Terminated sagemaker notebook instance: ' + str(i['NotebookInstanceName']))
              #Search Sagemaker in region2
              resp6 = smregion2.list_notebook_instances(StatusEquals='InService')
              for i in resp6['NotebookInstances']:
                  print(i['InstanceType'], i['NotebookInstanceStatus'], i['NotebookInstanceName'])
                  for b in sMtooBig:
                      if str(b) in str(i['InstanceType']):
                          smregion2.stop_notebook_instance(NotebookInstanceName=str(i['NotebookInstanceName']))
                          print('Terminated sagemaker notebook instance: ' + str(i['NotebookInstanceName']))
      FunctionName: MonitoringFunction
      Handler: index.lambda_handler
      Role: !GetAtt 'LabRole.Arn'
      Runtime: python3.8
      Timeout: 300

  MonitoringScheduledRule:
    Type: AWS::Events::Rule
    DependsOn: MonitoringFunction
    Properties:
      Description: "MonitoringScheduledRule"
      Name: "MonitoringScheduledRule"
      ScheduleExpression: "rate(3 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "MonitoringFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  MonitoringPermToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "MonitoringScheduledRule"
          - "Arn"

  VocLabPolicy1:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: String
      Roles:
        - !Ref LabRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [
          {
            "Sid": "IamAllowServiceLinkedRoleCreation",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/*"
          },
          {
              "Sid": "AllowAllActions1",
              "Effect": "Allow",
              "Action": [
                  "application-autoscaling:*",
                  "autoscaling:*",
                  "aws-marketplace:ViewSubscriptions",
                  "cloud9:*",
                  "cloudformation:*",
                  "cloudshell:*",
                  "cloudtrail:*",
                  "cloudwatch:*",
                  "codecommit:*",
                  "cognito-identity:*",
                  "cognito-idp:*",
                  "cognito-sync:*",
                  "compute-optimizer:GetEnrollmentStatus",
                  "comprehend:*",
                  "databrew:*",
                  "deepracer:*",
                  "dynamodb:*",
                  "ebs:*",
                  "ec2:*",
                  "ec2messages:*",
                  "ecr:*",
                  "elastic-inference:*",
                  "elasticbeanstalk:*",
                  "elasticfilesystem:*",
                  "elasticloadbalancing:*",
                  "elbv2:*",
                  "events:*"
              ],
              "Resource": "*",
              "Condition": {
                  "StringEquals": {
                      "aws:RequestedRegion": [
                          "us-east-1",
                          "us-west-2"
                      ]
                  }
              }
          },
          {
              "Sid": "AllowAllActions2",
              "Effect": "Allow",
              "Action": [
                  "forecast:*",
                  "glue:*",
                  "groundtruthlabeling:*",
                  "kms:*",
                  "lambda:*",
                  "lex:*",
                  "lightsail:*",
                  "logs:*",
                  "polly:*",
                  "rds:*",
                  "rekognition:*",
                  "resource-groups:*",
                  "robomaker:*",
                  "s3:*",
                  "sagemaker:*",
                  "secretsmanager:*",
                  "servicecatalog:*",
                  "sns:*",
                  "sqs:*",
                  "ssm:*",
                  "ssmmessages:*",
                  "states:*",
                  "sts:*",
                  "tag:*",
                  "textract:*",
                  "translate:*",
                  "trustedadvisor:*",
                  "wellarchitected:*"
              ],
              "Resource": "*",
              "Condition": {
                  "StringEquals": {
                      "aws:RequestedRegion": [
                          "us-east-1",
                          "us-west-2"
                      ]
                  }
              }
          }]

  VocLabPolicy2:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: String
      Roles:
        - !Ref LabRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement: [
          {
              "Sid": "IamLimited",
              "Effect": "Allow",
              "Action": [
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreatePolicy",
                "iam:CreateServiceLinkedRole",
                "iam:DeleteInstanceProfile",
                "iam:DeletePolicy",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:DeleteServiceLinkedRole",
                "iam:Describe*",
                "iam:Get*",
                "iam:List*",
                "iam:*LoginProfile",
                "iam:Remove*",
                "iam:Sim*",
                "iam:UpdateInstanceProfile",
                "iam:UpdatePolicy",
                "iam:UpdateRoleDescription",
                "iam:UpdateServiceLinkedRole"
              ],
              "Resource": "*"
          },
          {
              "Sid": "IamNoView",
              "Action": [
                  "iam:Delete*",
                  "iam:Update*"
              ],
              "Resource": [
                  "arn:aws:iam::*:policy/*VocLabPolicy*",
                  "arn:aws:iam::*:role/LabRole"
              ],
              "Effect": "Deny"
          },
          {
              "Sid": "LambdaNoView",
              "Action": [
                  "lambda:Add*",
                  "lambda:Create*",
                  "lambda:Delete*",
                  "lambda:Publish*",
                  "lambda:Put*",
                  "lambda:Remove*",
                  "lambda:Update*",
                  "events:Deactivate*",
                  "events:Disable*",
                  "events:Delete*",
                  "events:Put*",
                  "events:Remove*",
                  "events:Update*"
              ],
              "Resource": [
                  "arn:aws:lambda:us-east-1:*:function:MonitoringFunction",
                  "arn:aws:events:us-east-1:*:rule/MonitoringScheduledRule"
              ],
              "Effect": "Deny"
          },
          {
              "Sid": "DenyNoConds",
              "Effect": "Deny",
              "Action": [
                  "aws-portal:ModifyBilling",
                  "aws-portal:ModifyAccount",
                  "aws-portal:ViewAccount",
                  "aws-portal:ViewPaymentMethods",
                  "aws-portal:ModifyPaymentMethods",
                  "dynamodb:*Reserved*",
                  "ebs:FastSnapshotRestore",
                  "ec2:*Fpga*",
                  "ec2:*Spot*",
                  "ec2:*ReservedInstances*",
                  "ec2:*Scheduled*",
                  "ec2:*Purchase*",
                  "ec2:AcceptVpcEndpointConnections",
                  "ec2:AttachVpnGateway",
                  "ec2:CreateCapacityReservation",
                  "ec2:CreateCustomerGateway",
                  "ec2:CreateVpnConnectionRoute",
                  "ec2:CreateVpnGateway",
                  "ec2:EnableFastSnapshotRestores",
                  "ec2:GetHostReservationPurchasePreview",
                  "ec2:RunScheduledInstances",
                  "glacier:*VaultLock",
                  "rds:Purchase*",
                  "redshift:AcceptReservedNodeExchange",
                  "redshift:PurchaseReservedNodeOffering",
                  "route53domains:RegisterDomain",
                  "s3:*ObjectLegalHold",
                  "s3:*ObjectRetention",
                  "s3:*BucketObjectLock*"
              ],
              "Resource": "*"
          },
          {
              "Sid": "AsgRestrict",
              "Action": [
                  "autoscaling:CreateLaunchConfiguration"
              ],
              "Effect": "Deny",
              "Resource": "*",
              "Condition": {
                  "ForAnyValue:StringNotLike": {
                      "autoscaling:InstanceType": [
                          "*.nano",
                          "*.small",
                          "*.micro",
                          "*.medium",
                          "*.large"
                      ]
                  }
              }
          },
          {
              "Sid": "RestrictCloud9",
              "Effect": "Deny",
              "Action": [
                  "cloud9:UpdateEnvironment*",
                  "cloud9:CreateEnvironment*"
              ],
              "Resource": "*",
              "Condition": {
                  "ForAnyValue:StringNotLikeIfExists": {
                      "cloud9:InstanceType": [
                          "*.nano",
                          "*.micro",
                          "*.small",
                          "*.medium",
                          "*.large",
                          "c4.xlarge"
                      ]
                  }
              }
          },
          {
              "Sid": "Ec2RestrictPlacementGroup",
              "Action": "ec2:*Instance*",
              "Effect": "Deny",
              "Resource": "*",
              "Condition": {
                  "StringEquals": {
                      "ec2:PlacementGroupStrategy": "cluster"
                  }
              }
          },
          {
              "Sid": "Ec2DenyTenancy",
              "Action": "ec2:*Instance*",
              "Effect": "Deny",
              "Resource": "arn:aws:ec2:*:*:instance/*",
              "Condition": {
                  "StringNotLike": {
                      "ec2:Tenancy": "default"
                  }
              }
          },
          {
              "Sid": "Ec2RestrictInstanceTypes",
              "Action": [
                  "ec2:RunInstances",
                  "ec2:StartInstances"
              ],
              "Effect": "Deny",
              "Resource": "arn:aws:ec2:*:*:instance/*",
              "Condition": {
                  "ForAnyValue:StringNotLike": {
                      "ec2:InstanceType": [
                          "*.nano",
                          "*.micro",
                          "*.small",
                          "*.medium",
                          "*.large"
                      ]
                  }
              }
          },
          {
              "Sid": "Ec2RestrictNonAWSAMIs",
              "Action": "ec2:RunInstances",
              "Effect": "Deny",
              "Resource": [
                  "arn:aws:ec2:*:*:image/*"
              ],
              "Condition": {
                  "StringNotEqualsIgnoreCaseIfExists": {
                      "ec2:Owner": "amazon"
                  }
              }
          },
          {
              "Sid": "Ec2RestrictLargeVolumes",
              "Action": [
                  "ec2:RunInstances",
                  "ec2:CreateVolume"
              ],
              "Effect": "Deny",
              "Resource": "arn:aws:ec2:*:*:volume/*",
              "Condition": {
                  "NumericGreaterThanIfExists": {
                      "ec2:VolumeSize": "101"
                  }
              }
          },
          {
              "Sid": "Ec2RestrictPIOPSVolumes",
              "Action": [
                  "ec2:RunInstances",
                  "ec2:CreateVolume"
              ],
              "Effect": "Deny",
              "Resource": "arn:aws:ec2:*:*:volume/*",
              "Condition": {
                  "StringNotLikeIfExists": {
                      "ec2:VolumeType": [
                          "gp2",
                          "gp3",
                          "sc1",
                          "standard"
                      ]
                  }
              }
          }]

  VocLabPolicy3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: String
      Roles:
        - !Ref LabRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement: [
        {
            "Sid": "RdsAllow",
            "Action": [
                "rds:*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
                "ForAnyValue:StringLikeIfExists": {
                    "rds:DatabaseClass": [
                        "*.nano",
                        "*.small",
                        "*.micro",
                        "*.medium"
                    ],
                    "rds:DatabaseEngine": [
                        "aurora-mysql",
                        "aurora-postgresql",
                        "mysql",
                        "postgres",
                        "mariadb"
                    ]
                },
                "NumericLessThanIfExists": {
                    "rds:StorageSize": "101"
                }
            }
        },
        {
            "Sid": "RdsNoMultiAz",
            "Effect": "Deny",
            "Action": [
                "rds:CreateDBInstance",
                "rds:ModifyDBInstance"
            ],
            "Resource": "*",
            "Condition": {
                "BoolIfExists": {
                    "rds:MultiAz": "true"
                }
            }
        },
        {
            "Sid": "RdsPiops",
            "Action": [
                "rds:CreateGlobalCluster",
                "rds:CreateDBInstanceReadReplica",
                "rds:StartDB*",
                "rds:ModifyDBCluster",
                "rds:ModifyCurrentDBClusterCapacity",
                "rds:ModifyDBClusterEndpoint",
                "rds:ModifyDBInstance",
                "rds:ModifyGlobalCluster",
                "rds:RestoreDB*",
                "rds:RebootDBInstance"
            ],
            "Effect": "Deny",
            "Resource": "*",
            "Condition": {
                "NumericNotEqualsIfExists": {
                    "rds:Piops": "0"
                }
            }
        },
        {
            "Sid": "SmAllowSpecificModelTraining",
            "Effect": "Deny",
            "Action": [
                "sagemaker:CreateNotebookInstance",
                "sagemaker:CreateTrainingJob",
                "sagemaker:CreateTransformJob",
                "sagemaker:CreateEndpointConfig",
                "sagemaker:CreateHyperParameterTuningJob",
                "sagemaker:UpdateNotebookInstance"
            ],
            "Resource": [
                "*"
            ],
            "Condition": {
                "ForAnyValue:StringNotLike": {
                    "sagemaker:InstanceTypes": [
                        "ml.*.medium",
                        "ml.*.large",
                        "ml.*.xlarge"
                    ]
                }
            }
        },
        {
            "Sid": "ServiceLinkedRoleAndPolicies",
            "Effect": "Allow",
            "Action": [
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:UpdateAssumeRolePolicy",
                "iam:UpdateRole"
            ],
            "Resource": "*",
            "Condition": {
                "StringLikeIfExists": {
                    "iam:AWSServiceName": [
                        "*.amazonaws.com"
                    ]
                }
            }
        },
        {
            "Sid": "IamPolicies",
            "Effect": "Allow",
            "Action": [
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "iam:PutRolePolicy",
                "iam:UpdateAssumeRolePolicy",
                "iam:UpdateRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/*"
        }]

################################################
Outputs:
################################################

  AWSAccountId:
    Description: "Lab Account ID"
    Value: !Ref "AWS::AccountId"

  Region:
    Description: "Default lab Region"
    Value: !Ref "AWS::Region"
